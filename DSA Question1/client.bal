// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;

type lecturers record{
    string Office_number?;
    string Staff_number?;
    string[]Courses?;
};
type Courses record{
    string Course_name?;
    string Course_code?;
    int NQF_level?;
};




public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config =  {}, string serviceUrl = "http://localhost:8080") returns error? {
        http:ClientConfiguration httpClientConfig = {httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        http:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }
    # Get a list of all lecturers
    #
    # + return - A list of lecturers 
    resource isolated function get All_Lecturers() returns Lecturer[]|error {
        string resourcePath = string `/All_Lecturers`;
        Lecturer[] response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Get Lecturer using Staff number
    #
    # + staff_number - retrieve lecturer by staff number
    # + return - OK 
    resource isolated function get Lecturer_by_Staff_number(string staff_number) returns Lecturer|error {
        string resourcePath = string `/Lecturer_by_Staff_number`;
        map<anydata> queryParam = {"Staff_number": staff_number};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam);
        Lecturer response = check self.clientEp->get(resourcePath);
        return response;
    }
    # add new lecturer
    #
    # + return - lecturer added 
    resource isolated function post Add_Lecturer(Lecturer payload) returns string|error {
        string resourcePath = string `/Add_Lecturer`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        string response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Lecturer updated
    #
    # + return - updated 
    resource isolated function put Update_Lecturer(Lecturer payload) returns string|error {
        string resourcePath = string `/Update_Lecturer`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        string response = check self.clientEp->put(resourcePath, request);
        return response;
    }
    # Delete Lecturer using staff number
    #
    # + staff_number - Delete Lecturer by Staff number
    # + return - deleted 
    resource isolated function delete Delete_Lecturer/[string staff_number]() returns Lecturer|error {
        string resourcePath = string `/Delete_Lecturer/${getEncodedUri(staff_number)}`;
        Lecturer response = check self.clientEp-> delete(resourcePath);
        return response;
    }
    # Retrieve all lecturer's that teach the course
    #
    # + return - Lecturer's Successfully retrieved!! 
    resource isolated function get Course/[string course_code]/lecturers() returns Lecturer[]|error {
        string resourcePath = string `/Course/${getEncodedUri(course_code)}/lecturers`;
        Lecturer[] response = check self.clientEp->get(resourcePath);
        return response;
    }
    # Retrieve all lecturer's that sit in the same office
    #
    # + return - Successfully retrieved!! 
    resource isolated function get Office/[string office_number]/lecturers() returns Lecturer[]|error {
        string resourcePath = string `/Office/${getEncodedUri(office_number)}/lecturers`;
        Lecturer[] response = check self.clientEp->get(resourcePath);
        return response;
    }
}
