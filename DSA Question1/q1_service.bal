// AUTO-GENERATED FILE.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;
import ballerina/io;

type lecturer readonly & record{
    string Office_number;
    string Staff_number;
    string[]Courses;
};
type OkStringString record{
    string message;
};


table<lecturer>key(Staff_number)Lecturer_table = table[];


table<Courses>key()Course_table = table[];

listener http:Listener ep0 = new (8080, config = {host: "localhost"});


service / on ep0 {
    # Get a list of all lecturers
    #
    # + return - A list of lecturers 
    resource function get All_Lecturers() returns Lecturer[] {
         return Lecturer_table.toArray();
    }
    # Get Lecturer using Staff number
    #
    # + Staff_number - retrieve lecturer by staff number 
    # + return - OK 
    resource function get Lecturer_by_Staff_number(string Staff_number) returns Lecturer|string {
        foreach lecturers  X in Lecturer_table {
            if (X.Staff_number === Staff_number) {

                return  X.toString();
            }
            
        }
        string notFound = "Lecturer not found";
            return notFound;
    
    }
    # add new lecturer
    #
    # + payload - parameter description 
    # + return - lecturer added 
    resource function post Add_Lecturer(@http:Payload Lecturer payload) returns OkStringString {
        io:println(lecturers);
        OkStringString ok ={
           message: "Lecturer added Successfully"};
        return ok;
    }
    # Lecturer updated
    #
    # + payload - parameter description 
    # + return - updated 
    resource function put Update_Lecturer(@http:Payload Lecturer payload) returns string|string {
    io:println(lecturers);
         string updated = "updated successfully!!";
         return updated;
    }
    # Delete Lecturer using staff number
    #
    # + staff_number - Delete Lecturer by Staff number 
    # + return - deleted 
    resource function delete Delete_Lecturer/[string staff_number]() returns Lecturer|string {
    Lecturer_table = <table<lecturer>key(Staff_number)>Lecturer_table.filter((lecturer)=>lecturer.Staff_number != staff_number);
     table<lecturer> lecturerany = table [];

     if (Lecturer_table.length() === lecturerany.length()){
        return staff_number + "not found.";

    }
    return staff_number + "Deleted successfuly!!";
    }

    # Retrieve all lecturer's that teach the course
    #
    # + course_code - parameter description 
    # + return - Lecturer's Successfully retrieved!! 
    resource function get Course/[string course_code]/lecturers() returns Lecturer[]|string {
        
        foreach Courses A in Course_table {
            if (A.Course_code === course_code) {

                return  lecturer.toString();
            }
            
        }
        string notFound = "Lecturer not found";
            return notFound;
    }
    # Retrieve all lecturer's that sit in the same office
    #
    # + office_number - parameter description 
    # + return - Successfully retrieved!! 
    resource function get Office/[string office_number]/lecturers() returns Lecturer[]|string {
        foreach lecturers A in Lecturer_table {
            if (A.Office_number === office_number) {

                return  Lecturer_table.toArray();
            }
            
        }
        string notFound = "Lecturer not found";
            return notFound;
    }
}

